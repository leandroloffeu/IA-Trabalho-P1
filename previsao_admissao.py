
"""
Este programa carrega um modelo Keras pr√©-treinado e faz previs√µes de admiss√£o
baseadas nas caracter√≠sticas fornecidas pelo usu√°rio.
"""

import numpy as np
import pandas as pd
from keras.models import load_model
import os
import csv

def validar_entrada(valor, tipo, min_val, max_val, nome_campo):
    """
    Valida a entrada do usu√°rio conforme as regras de neg√≥cio.
    
    Args:
        valor: Valor a ser validado
        tipo: Tipo esperado ('int' ou 'float')
        min_val: Valor m√≠nimo permitido
        max_val: Valor m√°ximo permitido
        nome_campo: Nome do campo para mensagens de erro
    
    Returns:
        Valor validado ou None se inv√°lido
    """
    try:
        if tipo == 'int':
            valor = int(valor)
        elif tipo == 'float':
            valor = float(valor)
        
        if min_val <= valor <= max_val:
            return valor
        else:
            print(f"‚ùå {nome_campo} deve estar entre {min_val} e {max_val}")
            return None
    except ValueError:
        print(f"‚ùå {nome_campo} deve ser um n√∫mero v√°lido")
        return None

def solicitar_entrada_usuario():
    """
    Solicita e valida as caracter√≠sticas do usu√°rio.
    
    Returns:
        Lista com os valores validados ou None se houver erro
    """
    print("\n" + "="*60)
    print("üéì SISTEMA DE PREVIS√ÉO DE ADMISS√ÉO UNIVERSIT√ÅRIA")
    print("="*60)
    print("\nPor favor, forne√ßa as seguintes informa√ß√µes:")
    print("(Pressione Enter para usar valores padr√£o de exemplo)\n")
    

    colunas = ["GRE Score", "TOEFL Score", "University Rating", "SOP", "LOR", "CGPA", "Research"]
    

    validacoes = [
        ("GRE Score", "int", 260, 340),
        ("TOEFL Score", "int", 0, 120),
        ("University Rating", "int", 1, 5),
        ("SOP", "int", 1, 5),
        ("LOR", "int", 1, 5),
        ("CGPA", "float", 0.0, 10.0),
        ("Research", "int", 0, 1)
    ]
    
   
    valores_padrao = [312, 109, 3, 3, 3, 8.69, 0]
    
    valores = []
    
    for i, (campo, tipo, min_val, max_val) in enumerate(validacoes):
        while True:
            try:
                entrada = input(f"{campo} ({min_val}-{max_val}): ").strip()
                
              
                if not entrada:
                    valor = valores_padrao[i]
                    print(f"   ‚Üí Usando valor padr√£o: {valor}")
                    valores.append(valor)
                    break
                
              
                valor = validar_entrada(entrada, tipo, min_val, max_val, campo)
                if valor is not None:
                    valores.append(valor)
                    break
                    
            except KeyboardInterrupt:
                print("\n\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
                return None
    
    return valores

def carregar_modelo():
    """
    Carrega o modelo Keras pr√©-treinado.
    
    Returns:
        Modelo carregado ou None se houver erro
    """
    try:
        if not os.path.exists('modelo_treinado.keras'):
            print("‚ùå Erro: Arquivo 'modelo_treinado.keras' n√£o encontrado!")
            print("   Certifique-se de que o arquivo est√° no mesmo diret√≥rio do script.")
            return None
        
        print("üîÑ Carregando modelo pr√©-treinado...")
        modelo = load_model('modelo_treinado.keras')
        print("‚úÖ Modelo carregado com sucesso!")
        return modelo
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar o modelo: {e}")
        return None

def fazer_previsao(modelo, valores):
    """
    Faz a previs√£o usando o modelo carregado.
    
    Args:
        modelo: Modelo Keras carregado
        valores: Lista com os valores de entrada
    
    Returns:
        Probabilidade de admiss√£o (0.0 a 1.0)
    """
    try:
      
        entrada_array = np.array(valores).reshape(1, -1)
        
        print("\nüîÑ Gerando previs√£o...")
        previsao = modelo.predict(entrada_array, verbose=0)
        
      
        probabilidade = previsao[0][0]
        
        return probabilidade
        
    except Exception as e:
        print(f"‚ùå Erro ao fazer previs√£o: {e}")
        return None

def exibir_resultado(valores, probabilidade):
    """
    Exibe o resultado final formatado.
    
       valores: Lista com os valores de entrada
        probabilidade: Probabilidade de admiss√£o
    """
    colunas = ["GRE Score", "TOEFL Score", "University Rating", "SOP", "LOR", "CGPA", "Research"]
    
    print("\n" + "="*60)
    print("üìä RESULTADO DA PREVIS√ÉO")
    print("="*60)
    
    print("\nüìã Caracter√≠sticas fornecidas:")
    for i, (coluna, valor) in enumerate(zip(colunas, valores)):
        if coluna == "Research":
            valor_display = "Sim" if valor == 1 else "N√£o"
        elif coluna == "CGPA":
            valor_display = f"{valor:.2f}"
        else:
            valor_display = str(valor)
        print(f"   ‚Ä¢ {coluna}: {valor_display}")
    
    print(f"\nüéØ Chance prevista de admiss√£o: {probabilidade:.2%}")
    

    if probabilidade >= 0.8:
        status = "üü¢ ALTA - Muito prov√°vel admiss√£o"
    elif probabilidade >= 0.6:
        status = "üü° M√âDIA - Boa chance de admiss√£o"
    elif probabilidade >= 0.4:
        status = "üü† BAIXA - Chance moderada de admiss√£o"
    else:
        status = "üî¥ MUITO BAIXA - Pouca chance de admiss√£o"
    
    print(f"üìà Status: {status}")

def previsao_lote_csv(modelo, nome_arquivo):
    """
    Fun√ß√£o para previs√£o em lote usando arquivo CSV (desafio opcional).
    
    Args:
        modelo: Modelo Keras carregado
        nome_arquivo: Nome do arquivo CSV
    """
    try:
        print(f"\nüîÑ Processando arquivo CSV: {nome_arquivo}")
        
      
        df = pd.read_csv(nome_arquivo)
        
      
        colunas_necessarias = ["GRE Score", "TOEFL Score", "University Rating", "SOP", "LOR", "CGPA", "Research"]
        
        if not all(col in df.columns for col in colunas_necessarias):
            print("‚ùå Erro: Arquivo CSV deve conter as colunas:")
            for col in colunas_necessarias:
                print(f"   ‚Ä¢ {col}")
            return
        
        print(f"‚úÖ Arquivo carregado com {len(df)} registros")
        
       
        resultados = []
        for idx, row in df.iterrows():
            valores = [row[col] for col in colunas_necessarias]
            entrada_array = np.array(valores).reshape(1, -1)
            previsao = modelo.predict(entrada_array, verbose=0)
            probabilidade = previsao[0][0]
            resultados.append(probabilidade)
        
 
        df['Chance_Admissao'] = resultados
        df['Chance_Admissao_Percentual'] = [f"{p:.2%}" for p in resultados]
        
    
        nome_saida = nome_arquivo.replace('.csv', '_resultados.csv')
        df.to_csv(nome_saida, index=False)
        
        print(f"‚úÖ Resultados salvos em: {nome_saida}")
        
    
        print(f"\nüìä Resumo das previs√µes:")
        print(f"   ‚Ä¢ M√©dia de chance de admiss√£o: {np.mean(resultados):.2%}")
        print(f"   ‚Ä¢ Maior chance: {np.max(resultados):.2%}")
        print(f"   ‚Ä¢ Menor chance: {np.min(resultados):.2%}")
        
    except Exception as e:
        print(f"‚ùå Erro ao processar CSV: {e}")

def main():
    """
    Fun√ß√£o principal do programa.
    """
    print("üéì SISTEMA DE PREVIS√ÉO DE ADMISS√ÉO UNIVERSIT√ÅRIA")
    print("Desenvolvido para o Trabalho P1")
    
  
    modelo = carregar_modelo()
    if modelo is None:
        return
    
    while True:
        print("\n" + "="*60)
        print("üìã MENU PRINCIPAL")
        print("="*60)
        print("1. Fazer previs√£o individual")
        print("2. Previs√£o em lote (CSV)")
        print("3. Sair")
        
        try:
            opcao = input("\nEscolha uma op√ß√£o (1-3): ").strip()
            
            if opcao == "1":
                
                valores = solicitar_entrada_usuario()
                if valores is None:
                    continue
                
                probabilidade = fazer_previsao(modelo, valores)
                if probabilidade is not None:
                    exibir_resultado(valores, probabilidade)
            
            elif opcao == "2":
            
                nome_arquivo = input("\nDigite o nome do arquivo CSV: ").strip()
                if nome_arquivo and os.path.exists(nome_arquivo):
                    previsao_lote_csv(modelo, nome_arquivo)
                else:
                    print("‚ùå Arquivo n√£o encontrado!")
            
            elif opcao == "3":
                print("\nüëã Obrigado por usar o sistema! At√© logo!")
                break
            
            else:
                print("‚ùå Op√ß√£o inv√°lida! Escolha 1, 2 ou 3.")
        
        except KeyboardInterrupt:
            print("\n\nüëã Programa encerrado pelo usu√°rio. At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    main()
